#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "MinHeap"
#define MAXFILE_BUILD_DIR  "/tmp/MinHeap_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160606
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 36)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "MinHeapKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(MinHeapKernel, Kernel)
MANAGER_NODE(x, PCIe_From_Host)
MANAGER_NODE(y, PCIe_From_Host)
MANAGER_NODE(z, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_4, DualAspectMux)
MANAGER_NODE(Stream_9, DualAspectReg)
MANAGER_NODE(Stream_21, StreamPullPushAdapter)
MANAGER_NODE(Stream_11, Fifo)
MANAGER_NODE(Stream_15, Fifo)
MANAGER_NODE(Stream_13, Fifo)
MANAGER_NODE(Stream_17, Fifo)
MANAGER_NODE(Stream_19, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(MinHeapKernel, x, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(MinHeapKernel, y, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(MinHeapKernel, z, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(x, x, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(y, y, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(z, z, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_4, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_4, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_9, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_9, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_21, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_21, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_11, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_11, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_15, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_15, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_13, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_13, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_17, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_17, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_19, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_19, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(x, x, Stream_11, input, 128)
MANAGER_STREAM(y, y, Stream_15, input, 128)
MANAGER_STREAM(MinHeapKernel, z, Stream_19, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_13, input, 32)
MANAGER_STREAM(Stream_4, output, Stream_17, input, 32)
MANAGER_STREAM(Stream_9, output, Stream_21, input, 128)
MANAGER_STREAM(Stream_21, output, z, z, 128)
MANAGER_STREAM(Stream_11, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_15, output, Stream_4, input, 128)
MANAGER_STREAM(Stream_13, output, MinHeapKernel, x, 32)
MANAGER_STREAM(Stream_17, output, MinHeapKernel, y, 32)
MANAGER_STREAM(Stream_19, output, Stream_9, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(MinHeapKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(x, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(y, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(z, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_4, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_9, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_21, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_11, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_15, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_13, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_17, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_19, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(MinHeapKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(MinHeapKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(MinHeapKernel, MinHeapKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(MinHeapKernel, x, 0)
DEBUG_INPUT_BITS(MinHeapKernel, y, 1)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(MinHeapKernel, z, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(x, PCIePushSourceSyncMax4, "x")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(y, PCIePushSourceSyncMax4, "y")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_11, FifoPushToPullSync, "Stream_11", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_15, FifoPushToPullSync, "Stream_15", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_4, DualAspectMuxSync, "Stream_4", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_13, FifoPushToPullSync, "Stream_13", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_17, FifoPushToPullSync, "Stream_17", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MinHeapKernel, MinHeapKernel, "MinHeapKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_19, FifoPushToPullSync, "Stream_19", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_9, DualAspectRegSync, "Stream_9", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_21, PullToPushAdapterSync, "Stream_21")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(z, PCIePushSinkSyncMax3, "z")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 2, 1, 0, 0, 0, 0, 0, 36)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "a6c1d2f2b133f36672f5029e07b9a976f936fa8ea9177d343949782b2b6946a0")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_done, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_read, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_request, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_fill_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flush_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flush_start_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_full_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(x, STREAM_FROM_HOST, 0)
PCIE_STREAM(y, STREAM_FROM_HOST, 1)
PCIE_STREAM(z, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(MinHeapKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MinHeapKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MinHeapKernel.io_z_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MinHeapKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MinHeapKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MinHeapKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2))
REG(MinHeapKernel.dbg_ctld_done, 0x10, 1, hwBits(2))
REG(MinHeapKernel.dbg_ctld_empty, 0x11, 1, hwBits(2))
REG(MinHeapKernel.dbg_ctld_read, 0x12, 1, hwBits(2))
REG(MinHeapKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6))
REG(MinHeapKernel.dbg_ctld_request, 0x14, 1, hwBits(2))
REG(MinHeapKernel.dbg_done_out, 0x15, 1, hwBits(1))
REG(MinHeapKernel.dbg_fill_level, 0x16, 1, hwBits(8))
REG(MinHeapKernel.dbg_flush_level, 0x17, 1, hwBits(8))
REG(MinHeapKernel.dbg_flush_start, 0x18, 1, hwBits(1))
REG(MinHeapKernel.dbg_flush_start_level, 0x19, 1, hwBits(8))
REG(MinHeapKernel.dbg_flushing, 0x1a, 1, hwBits(1))
REG(MinHeapKernel.dbg_full_level, 0x1b, 1, hwBits(8))
REG(MinHeapKernel.dbg_out_stall, 0x1c, 1, hwBits(1))
REG(MinHeapKernel.dbg_out_valid, 0x1d, 1, hwBits(1))
REG(MinHeapKernel.dbg_stall_vector, 0x1e, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(MinHeapKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MinHeapKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MinHeapKernel.io_z_force_disabled, 0x2, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MinHeapKernel.run_cycle_count, 0x3, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(MinHeapKernel.current_run_cycle_count, 0x9, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_almost_empty, 0xf, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_done, 0x10, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_empty, 0x11, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_read, 0x12, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_read_pipe_dbg, 0x13, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_request, 0x14, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_done_out, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_fill_level, 0x16, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flush_level, 0x17, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flush_start, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flush_start_level, 0x19, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flushing, 0x1a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_full_level, 0x1b, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_out_stall, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_out_valid, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_stall_vector, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1f, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x20, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("a6c1d2f2b133f36672f5029e07b9a976f936fa8ea9177d343949782b2b6946a0")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME MinHeap
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_MinHeap_H
#define SLIC_DECLARATIONS_MinHeap_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define MinHeap_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_y The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_z The stream should be of size (param_N * 4) bytes.
 */
void MinHeap(
	int32_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_z);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [in] instream_y The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_z The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *MinHeap_nonblock(
	int32_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_z);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const int32_t *instream_x; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	const int32_t *instream_y; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	int32_t *outstream_z; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} MinHeap_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void MinHeap_run(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_nonblock(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MinHeap_run_group(max_group_t *group, MinHeap_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_group_nonblock(max_group_t *group, MinHeap_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MinHeap_run_array(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_array_nonblock(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MinHeap_convert(max_file_t *maxfile, MinHeap_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* MinHeap_init(void);

/* Error handling functions */
int MinHeap_has_errors(void);
const char* MinHeap_get_errors(void);
void MinHeap_clear_errors(void);
/* Free statically allocated maxfile data */
void MinHeap_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int MinHeap_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int MinHeap_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_MinHeap_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(MinHeapKernel, 1929, NodeInputMappedReg, "Scalar input (io_z_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:89)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1930, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:89)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1952, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1953, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1961, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1962, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1970, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1971, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1979, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1980, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1988, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1989, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1997, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1998, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2006, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2007, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2015, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2016, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2024, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2025, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2033, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2034, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2971, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:16)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x100000000; 4.294967296E9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:16)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 3, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:16)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 0, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000003; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:15)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 5, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:18)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 7, NodeInputMappedReg, "Scalar input (io_x_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:22)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 8, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:22)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 9, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:22)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2696, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 10, NodeInput, "Input(x)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:22)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2697, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 12, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:25)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2970, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 21, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2698, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 4, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:17)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 6, NodeGte, ">=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gte(DFEVar.java:738)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:19)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 14, NodeInputMappedReg, "Scalar input (io_y_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:28)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 15, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:28)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 16, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:28)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 17, NodeInput, "Input(y)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:28)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 23, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 78, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2700, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 79, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 89, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2035, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2036, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 90, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 93, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 13, NodeStreamOffset, "stream offset: 2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:25)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2702, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2703, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 94, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 95, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2704, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2037, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 96, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 99, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2893, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2706, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 100, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 101, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2707, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 102, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2040, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 131, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2067, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 134, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 135, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2884, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2892, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 136, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2718, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2969, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 25, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2968, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 27, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2711, NodeFIFO, "FIFO(18)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2710, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 28, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 29, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 139, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2069, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 142, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 143, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2714, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 125, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 128, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 129, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 130, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2894, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2895, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 144, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 263, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2716, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2717, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 264, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 274, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2088, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2089, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 275, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 278, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 145, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 148, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 149, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 150, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2721, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2722, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 279, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 280, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2723, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2107, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 281, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 284, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2899, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2896, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 285, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 286, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2726, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 287, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2110, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 316, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2137, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 319, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 320, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2897, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2898, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 321, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2737, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2967, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 31, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2966, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 33, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2730, NodeFIFO, "FIFO(32)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2885, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 34, NodeStreamOffset, "stream offset: 2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 35, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 324, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2139, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 327, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 328, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2733, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 310, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 313, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 314, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 315, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2900, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2901, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 329, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 448, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2735, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2736, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 449, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 459, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2158, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2159, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 460, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 463, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 330, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 333, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 334, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 335, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2740, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2741, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 464, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 465, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2742, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2177, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 466, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 469, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2905, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2902, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 470, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 471, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2745, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 472, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2180, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 501, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2207, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 504, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 505, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2903, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2904, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 506, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2756, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2965, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000003; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 37, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2964, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 39, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2749, NodeFIFO, "FIFO(46)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2886, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 40, NodeStreamOffset, "stream offset: 3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 41, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 509, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2209, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 512, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 513, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2752, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 495, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 498, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 499, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 500, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2906, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2907, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 514, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 633, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2754, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2755, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 634, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 644, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2228, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2229, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 645, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 648, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 515, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 518, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 519, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 520, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2759, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2760, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 649, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 650, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2761, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2247, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 651, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 654, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2911, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2908, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 655, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 656, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2764, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 657, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2250, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 686, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2277, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 689, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 690, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2909, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2910, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 691, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2775, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2963, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000004; 4.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 43, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2962, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 45, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2768, NodeFIFO, "FIFO(60)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2887, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 46, NodeStreamOffset, "stream offset: 4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 47, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 694, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2279, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 697, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 698, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2771, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 680, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 683, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 684, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 685, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2912, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2913, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 699, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 818, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2773, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2774, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 819, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 829, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2298, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2299, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 830, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 833, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 700, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 703, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 704, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 705, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2778, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2779, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 834, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 835, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2780, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2317, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 836, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 839, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2917, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2914, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 840, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 841, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2783, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 842, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2320, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 871, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2347, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 874, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 875, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2915, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2916, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 876, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2794, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2961, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000005; 5.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 49, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2960, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 51, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2787, NodeFIFO, "FIFO(74)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2888, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 52, NodeStreamOffset, "stream offset: 5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 53, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 879, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2349, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 882, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 883, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2790, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 865, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 868, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 869, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 870, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2918, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2919, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 884, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1003, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2792, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2793, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1004, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1014, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2368, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2369, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1015, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1018, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 885, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 888, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 889, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 890, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2797, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2798, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1019, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1020, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2799, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2387, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1021, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1024, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2923, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2920, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1025, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1026, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2802, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1027, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2390, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1056, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2417, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1059, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1060, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2921, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2922, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1061, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2813, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2959, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000006; 6.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 55, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2958, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 57, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2806, NodeFIFO, "FIFO(88)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2889, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 58, NodeStreamOffset, "stream offset: 6", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 59, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1064, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2419, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1067, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1068, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2809, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1050, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1053, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1054, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1055, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2924, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2925, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1069, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1188, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2811, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2812, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1189, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1199, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2438, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2439, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1200, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1203, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1070, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1073, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1074, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1075, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2816, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2817, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1204, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1205, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2818, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2457, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1206, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1209, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2929, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2926, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1210, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1211, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2821, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1212, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2460, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1241, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2487, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1244, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1245, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2927, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2928, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1246, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2832, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2957, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000007; 7.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 61, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2956, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 63, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2825, NodeFIFO, "FIFO(102)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2890, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 64, NodeStreamOffset, "stream offset: 7", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 65, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1249, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2489, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1252, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1253, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2828, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1235, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1238, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1239, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1240, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2930, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2931, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1254, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1373, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2830, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2831, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1374, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1384, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2508, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2509, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1385, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1388, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1255, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1258, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1259, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1260, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2835, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2836, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1389, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1390, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2837, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2527, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1391, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1394, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2935, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2932, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1395, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1396, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2840, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1397, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2530, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1426, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2557, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1429, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1430, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2933, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2934, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1431, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2851, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2955, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000008; 8.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 67, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2954, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 69, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2844, NodeFIFO, "FIFO(116)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2891, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 70, NodeStreamOffset, "stream offset: 8", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 71, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1434, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2559, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1437, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1438, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2847, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1420, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1423, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1424, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1425, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2936, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2937, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1439, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1558, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2849, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2850, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1559, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1569, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2578, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2579, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1570, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1573, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1440, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1443, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1444, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1445, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2854, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2855, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1574, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1575, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2856, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2597, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1576, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1579, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2941, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2938, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1580, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1581, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2859, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1582, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2600, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1611, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2627, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1614, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1615, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2939, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2940, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1616, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2871, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2953, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000009; 9.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 73, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2952, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000010; 16.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 75, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2863, NodeFIFO, "FIFO(117)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 76, NodeStreamOffset, "stream offset: 9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 77, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:31)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2868, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1619, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2629, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1622, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1623, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2866, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1605, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1608, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1609, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1610, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2942, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2943, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1624, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1743, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2869, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2946, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1744, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:40)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1754, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2648, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2649, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:59)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1755, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:63)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1758, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1625, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1628, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1629, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1630, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:82)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2874, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2875, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1759, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1760, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2876, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2667, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:60)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1761, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1764, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2948, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2944, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1765, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1766, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2879, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1767, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:69)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2670, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:56)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1804, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2683, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1807, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1808, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2882, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1790, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2685, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:80)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1793, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1794, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2947, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2945, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1795, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2949, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1809, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:81)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1932, NodeOutput, "Output(z)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:89)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1937, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2951, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1934, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1935, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1936, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1938, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2950, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1940, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1941, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1943, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1944, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1942, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int MinHeap_has_errors(void)
{	return stored_has_error; }
const char* MinHeap_get_errors(void)
{	return stored_error; }
void MinHeap_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char MinHeap_use_simulation[16];
static void MinHeap_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(MinHeap_use_simulation, 16, "MinHeap_%05ld_", pid);
}
static const char *MinHeap_check_use_simulation(void)
{
	MinHeap_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = MinHeap_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int MinHeap_simulation_launch = 0;
int MinHeap_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = MinHeap_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int MinHeap_simulator_stop(void)
{
	const char *use_sim = MinHeap_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void MinHeap_static_init(void) 
{
	stored_maxfile = MinHeap_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = MinHeap_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = MinHeap_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			MinHeap_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void MinHeap_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (MinHeap_simulation_launch == 1) {
		int sim_stat = MinHeap_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		MinHeap_simulation_launch = 0;
	}
}

static int MinHeap_get_pcie_alignment(void)
{
#ifdef MinHeap_PCIE_ALIGNMENT
	return ((MinHeap_PCIE_ALIGNMENT < 1) ? 16 : MinHeap_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int MinHeap_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = MinHeap_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *MinHeap_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = MinHeap_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct MinHeap_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} MinHeap_callback_stream_t;

typedef struct MinHeap_callback_data {
	MinHeap_callback_stream_t stream[3]; 
	int count;
	int max_count;
} MinHeap_callback_data_t;

static void MinHeap_callback_internal(void *cb_data)
{
	MinHeap_callback_data_t *data = (MinHeap_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		MinHeap_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* MinHeap_convert_internal(
	max_file_t *maxfile,
	MinHeap_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	MinHeap_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(MinHeap_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function MinHeap_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 3;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &MinHeap_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar MinHeapKernel.run_cycle_count */
	uint64_t ticks_MinHeapKernel = param_N;
	max_set_ticks(actions, "MinHeapKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar MinHeapKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream x */
	size_t instream_size_x = tmp_0;
	if (instream_size_x > 0) {
		const int32_t *stream_ptr = interface_actions->instream_x;
		if (use_callback && (1 == MinHeap_check_aligned(interface_actions->instream_x))) {
			int32_t *aligned_instream_x = malloc(instream_size_x);
			if (aligned_instream_x == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'x'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_x;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_x;
			(&cb_data->stream[cb_data->count])->size        = instream_size_x;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_x, interface_actions->instream_x, instream_size_x);
			stream_ptr = aligned_instream_x;
		}
		max_queue_input(actions, "x", stream_ptr, instream_size_x);
		CHECK_ERRORS;
	}
	/* end of code for stream x */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream y */
	size_t instream_size_y = tmp_1;
	if (instream_size_y > 0) {
		const int32_t *stream_ptr = interface_actions->instream_y;
		if (use_callback && (1 == MinHeap_check_aligned(interface_actions->instream_y))) {
			int32_t *aligned_instream_y = malloc(instream_size_y);
			if (aligned_instream_y == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'y'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_y;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_y;
			(&cb_data->stream[cb_data->count])->size        = instream_size_y;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_y, interface_actions->instream_y, instream_size_y);
			stream_ptr = aligned_instream_y;
		}
		max_queue_input(actions, "y", stream_ptr, instream_size_y);
		CHECK_ERRORS;
	}
	/* end of code for stream y */
	
	int64_t tmp_2 = (param_N * 4);
	
	/* code for stream z */
	size_t outstream_size_z = tmp_2;
	if (outstream_size_z > 0) {
		int32_t *stream_ptr = interface_actions->outstream_z;
		if (use_callback && (1 == MinHeap_check_aligned(interface_actions->outstream_z))) {
			int32_t *aligned_outstream_z = malloc(outstream_size_z);
			if (aligned_outstream_z == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'z'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_z;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_z;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_z;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_z;
		}
		max_queue_output(actions, "z", stream_ptr, outstream_size_z);
		CHECK_ERRORS;
	}
	/* end of code for stream z */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void MinHeap(
	int32_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_z)
{
	(void) pthread_once(&slic_bs_is_initialised, MinHeap_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = MinHeap_nonblock(param_N, instream_x, instream_y, outstream_z);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MinHeap_nonblock(
	int32_t param_N,
	const int32_t *instream_x,
	const int32_t *instream_y,
	int32_t *outstream_z)
{
	MinHeap_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_x = instream_x;
	interface_actions.instream_y = instream_y;
	interface_actions.outstream_z = outstream_z;
	(void) pthread_once(&slic_bs_is_initialised, MinHeap_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MinHeap_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void MinHeap_run(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions)
{
	max_run_t *run = MinHeap_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MinHeap_run_nonblock(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MinHeap_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MinHeap_run_group(max_group_t *group, MinHeap_actions_t *interface_actions)
{
	max_run_t *run = MinHeap_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_group_nonblock(max_group_t *group, MinHeap_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = MinHeap_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MinHeap_run_array(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[])
{
	max_run_t *run = MinHeap_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_array_nonblock(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = MinHeap_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MinHeap_convert(max_file_t *maxfile, MinHeap_actions_t *interface_actions)
{
	return MinHeap_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(MinHeapKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(x, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(y, tmp_1)	
SLIC_TEMP_VAR(int64_t tmp_2 = (param_N * 4);)	
SLIC_STREAM(z, tmp_2)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9Ik1pbkhlYXAuaCIgbmFtZT0i
TWluSGVhcCI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBlPSJsb25nIiB2YWx1
ZT0iMTYiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0iTWluSGVh
cCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIg
JnF1b3Q7TiZxdW90Oy46IE51bWJlciBvZiBkYXRhIGl0ZW1zIHRvIHByb2Nlc3MiIGRpcmVjdGlv
bj0iSW5wdXQiIG5hbWU9InBhcmFtX04iIHR5cGU9ImludDMyX3QiLz48YXJyYXkgZGVzYz0iVGhl
IHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9u
PSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1feCIgc2l6ZT0iKHBhcmFtX04gKiA0KSIgdHJhbnNwb3Nl
PSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5j
dGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9O
ICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Iioi
IHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0
YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxj
b25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2Fs
bD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNo
b3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBu
YW1lPSJpbnN0cmVhbV95IiBzaXplPSIocGFyYW1fTiAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5
cGU9ImludDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48
bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKHBhcmFtX04gKiA0KSAvIDQp
Ij48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9Iihw
YXJhbV9OICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX04iLz48Y29uc3RhbnRWYWx1ZSB2
YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFs
dWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3Ro
PjwvZGltZW5zaW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9m
IHNpemUgKHBhcmFtX04gKiA0KSBieXRlcy4iIGRpcmVjdGlvbj0iT3V0cHV0IiBuYW1lPSJvdXRz
dHJlYW1feiIgc2l6ZT0iKHBhcmFtX04gKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQz
Ml90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFy
eU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9OICogNCkgLyA0KSI+PGZ1bmN0
aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fTiAq
IDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQi
Lz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVl
PSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVu
c2lvbj48L2FycmF5PjwvZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBNaW5IZWFwX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hhc19lcnJv
cjsgfQpjb25zdCBjaGFyKiBNaW5IZWFwX2dldF9lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVk
X2Vycm9yOyB9CnZvaWQgTWluSGVhcF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRf
ZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9Cgpz
dGF0aWMgY2hhciBNaW5IZWFwX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGljIHZvaWQgTWluSGVh
cF9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBpZCgp
KSAlIDEwMDAwMDsKCXNucHJpbnRmKE1pbkhlYXBfdXNlX3NpbXVsYXRpb24sIDE2LCAiTWluSGVh
cF8lMDVsZF8iLCBwaWQpOwp9CnN0YXRpYyBjb25zdCBjaGFyICpNaW5IZWFwX2NoZWNrX3VzZV9z
aW11bGF0aW9uKHZvaWQpCnsKCU1pbkhlYXBfZGVmX3VzZV9zaW11bGF0aW9uKCk7Cgljb25zdCBj
aGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5nKE1BWF9DT05GSUdfVVNFX1NJTVVM
QVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVzZV9zaW0gPSBNaW5IZWFwX3VzZV9z
aW11bGF0aW9uOwoJCW1heF9jb25maWdfc2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFU
SU9OLCB1c2Vfc2ltKTsKCX0KCXJldHVybiB1c2Vfc2ltOwp9CgpzdGF0aWMgaW50IE1pbkhlYXBf
c2ltdWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgTWluSGVhcF9zaW11bGF0b3Jfc3RhcnQodm9pZCkK
ewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gTWluSGVhcF9jaGVja191
c2Vfc2ltdWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwg
IlBBVEg9c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVg0ODQ4
QSAtUyBzaW11dGlscyByZXN0YXJ0IiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4o
YnVmZiwgInIiKTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBm
YWlsZWQgdG8gZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihi
dWZmKTsKCQlyZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkg
IT0gTlVMTCkgewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBv
dXRwdXQgKi8KCQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7ICovCgkJaWYgKHN0cnN0cihidWZm
LCAiRXJyb3IiKSkgewoJCQlzZXRfZXJyb3IoYnVmZik7CgkJCXJldHZhbCA9IC0xOwoJCX0KCX0K
CXBjbG9zZShwaXBlX2ZwKTsKCXJldHVybiByZXR2YWw7Cn0KCmludCBNaW5IZWFwX3NpbXVsYXRv
cl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBNaW5IZWFwX2NoZWNrX3VzZV9z
aW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFU
SD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1T
IHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAi
ciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0
byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJ
CXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxM
KSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAq
LwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7
CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgTWluSGVhcF9zdGF0aWNfaW5pdCh2b2lkKSAKewoJ
c3RvcmVkX21heGZpbGUgPSBNaW5IZWFwX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBO
VUxMIHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRfbWF4Zmls
ZSA9IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRF
UkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJs
ZSB0byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9nbG9iYWxf
ZXJyb3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UobWF4X2ds
b2JhbF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9ib29sKE1B
WF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vycm9yc19t
b2RlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJldmlvdXMg
PSBtYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFyICp1c2Vf
c2ltID0gTWluSGVhcF9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1v
bihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IE1pbkhl
YXBfc2ltdWxhdG9yX3N0YXJ0KCk7CgkJaWYgKChzaW1fc3RhdCA9PSAwKSAmJiAobWF4X3Bpbmdf
ZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAxKSkgewoJCQlNaW5IZWFwX3NpbXVs
YXRpb25fbGF1bmNoID0gMTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJv
ciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1
Y3R1cmUgYXV0b21hdGljYWxseS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAn
dXNlX3NpbXVsYXRpb249PHNpbXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3Vy
IFNMaUMgY29uZmlndXJhdGlvbiIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUg
YXNzb2NpYXRlZCBzaW11bGF0ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhf
ZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQly
ZXR1cm47CgkJfQoJfQoJc3RvcmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAi
KiIpOwoJaWYgKCFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IHsKCQkJZnByaW50ZihzdGRlcnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcg
bm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJ
c2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9y
cykpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUg
PSBOVUxMOwoJCQlyZXR1cm47CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhm
aWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsKfQp2b2lkIE1pbkhlYXBfZnJlZSh2b2lkKQp7CglpZiAo
c3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9hZChzdG9yZWRfZW5naW5lKTsKCQlz
dG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJ
bWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
fQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0
b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoTWluSGVhcF9zaW11bGF0aW9uX2xhdW5jaCA9PSAx
KSB7CgkJaW50IHNpbV9zdGF0ID0gTWluSGVhcF9zaW11bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1f
c3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0b3BwaW5nIHNpbXVsYXRv
ci4iKTsKCQl9CgkJTWluSGVhcF9zaW11bGF0aW9uX2xhdW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBp
bnQgTWluSGVhcF9nZXRfcGNpZV9hbGlnbm1lbnQodm9pZCkKewojaWZkZWYgTWluSGVhcF9QQ0lF
X0FMSUdOTUVOVAoJcmV0dXJuICgoTWluSGVhcF9QQ0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBN
aW5IZWFwX1BDSUVfQUxJR05NRU5UKTsKI2Vsc2UKCXJldHVybiAxNjsKI2VuZGlmCn0KCnN0YXRp
YyBpbnQgTWluSGVhcF9jaGVja19hbGlnbmVkKGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJf
dCBwb2ludGVyID0gKHVpbnRwdHJfdCkgZGF0YTsKCWludCBhbGlnbm1lbnQgPSBNaW5IZWFwX2dl
dF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAw
Owp9CgpzdGF0aWMgdm9pZCAqTWluSGVhcF9tYWxsb2NfYWxpZ25lZChjb25zdCBzaXplX3Qgc2l6
ZSkKewoJdm9pZCAqcHRyOwoJaW50IGFsaWdubWVudCA9IE1pbkhlYXBfZ2V0X3BjaWVfYWxpZ25t
ZW50KCk7Cglwb3NpeF9tZW1hbGlnbigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0
cjsKfQoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0gSW50ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwov
Ki0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVU
KSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NP
TkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwg
IiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJy
b3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0g
CiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxM
KSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJy
b3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0
X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IE1pbkhlYXBf
Y2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9w
dHI7CglzaXplX3QgICBzaXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9IE1pbkhlYXBfY2FsbGJh
Y2tfc3RyZWFtX3Q7Cgp0eXBlZGVmIHN0cnVjdCBNaW5IZWFwX2NhbGxiYWNrX2RhdGEgewoJTWlu
SGVhcF9jYWxsYmFja19zdHJlYW1fdCBzdHJlYW1bM107IAoJaW50IGNvdW50OwoJaW50IG1heF9j
b3VudDsKfSBNaW5IZWFwX2NhbGxiYWNrX2RhdGFfdDsKCnN0YXRpYyB2b2lkIE1pbkhlYXBfY2Fs
bGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJTWluSGVhcF9jYWxsYmFja19kYXRhX3Qg
KmRhdGEgPSAoTWluSGVhcF9jYWxsYmFja19kYXRhX3QqKSBjYl9kYXRhOwoJZm9yIChpbnQgaSA9
IDAgOyBpIDwgZGF0YS0+Y291bnQgOyBpKysgKSB7CgkJTWluSGVhcF9jYWxsYmFja19zdHJlYW1f
dCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+
IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJ
CX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhf
YWN0aW9uc190KiBNaW5IZWFwX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxl
LAoJTWluSGVhcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zLAoJaW50ICBpc19pbnRlcm5h
bF9jYWxsLAoJdm9pZCAoKipjYWxsYmFja19mdW5jKSh2b2lkKiksCgl2b2lkICoqY2FsbGJhY2tf
ZGF0YSkKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25zX2luaXQobWF4Zmls
ZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoKI2RlZmluZSBDSEVD
S19FUlJPUlMgaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNldF9lcnJvcl9hbmRfZnJl
ZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnMtPmVycm9ycykpOyByZXR1cm4gTlVMTDsgfSAKCglN
aW5IZWFwX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNr
ID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7Cglp
ZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoTWluSGVhcF9jYWxs
YmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJy
LCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4g
ZnVuY3Rpb24gTWluSGVhcF9jb252ZXJ0X2ludGVybmFsXG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJ
fQoJCWNiX2RhdGEtPm1heF9jb3VudCA9IDM7CgkJY2JfZGF0YS0+Y291bnQgICAgID0gMDsKCQkq
Y2FsbGJhY2tfZGF0YSAgICAgPSBjYl9kYXRhOwoJCSpjYWxsYmFja19mdW5jICAgICA9ICZNaW5I
ZWFwX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWludDMyX3QgcGFyYW1fTiA9IGludGVyZmFjZV9h
Y3Rpb25zLT5wYXJhbV9OOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgTWluSGVhcEtlcm5lbC5ydW5f
Y3ljbGVfY291bnQgKi8KCXVpbnQ2NF90IHRpY2tzX01pbkhlYXBLZXJuZWwgPSBwYXJhbV9OOwoJ
bWF4X3NldF90aWNrcyhhY3Rpb25zLCAiTWluSGVhcEtlcm5lbCIsIHBhcmFtX04pOwoJQ0hFQ0tf
RVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBNaW5IZWFwS2VybmVsLnJ1bl9jeWNs
ZV9jb3VudCovCgkKCWludDY0X3QgdG1wXzAgPSAocGFyYW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZv
ciBzdHJlYW0geCAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfeCA9IHRtcF8wOwoJaWYgKGluc3Ry
ZWFtX3NpemVfeCA+IDApIHsKCQljb25zdCBpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNl
X2FjdGlvbnMtPmluc3RyZWFtX3g7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBNaW5IZWFw
X2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3gpKSkgewoJCQlpbnQz
Ml90ICphbGlnbmVkX2luc3RyZWFtX3ggPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV94KTsKCQkJaWYg
KGFsaWduZWRfaW5zdHJlYW1feCA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMo
YWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxv
Y2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICd4JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJ
CQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0g
KHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1feDsKCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRf
aW5zdHJlYW1feDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAg
ICAgICAgPSBpbnN0cmVhbV9zaXplX3g7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNv
dW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5
KGFsaWduZWRfaW5zdHJlYW1feCwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3gsIGluc3Ry
ZWFtX3NpemVfeCk7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX3g7CgkJfQoJCW1h
eF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAieCIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfeCk7
CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB4ICovCgkKCWlu
dDY0X3QgdG1wXzEgPSAocGFyYW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0geSAqLwoJ
c2l6ZV90IGluc3RyZWFtX3NpemVfeSA9IHRtcF8xOwoJaWYgKGluc3RyZWFtX3NpemVfeSA+IDAp
IHsKCQljb25zdCBpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3Ry
ZWFtX3k7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBNaW5IZWFwX2NoZWNrX2FsaWduZWQo
aW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3kpKSkgewoJCQlpbnQzMl90ICphbGlnbmVkX2lu
c3RyZWFtX3kgPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV95KTsKCQkJaWYgKGFsaWduZWRfaW5zdHJl
YW1feSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3Jz
LCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1l
bW9yeSBmb3Igc3RyZWFtICd5JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0
YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRl
cmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1feTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+
Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1feTsKCQkJ
KCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVh
bV9zaXplX3k7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1
dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJl
YW1feSwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3ksIGluc3RyZWFtX3NpemVfeSk7CgkJ
CXN0cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX3k7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChh
Y3Rpb25zLCAieSIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfeSk7CgkJQ0hFQ0tfRVJST1JT
OwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB5ICovCgkKCWludDY0X3QgdG1wXzIgPSAo
cGFyYW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0geiAqLwoJc2l6ZV90IG91dHN0cmVh
bV9zaXplX3ogPSB0bXBfMjsKCWlmIChvdXRzdHJlYW1fc2l6ZV96ID4gMCkgewoJCWludDMyX3Qg
KnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3o7CgkJaWYgKHVzZV9j
YWxsYmFjayAmJiAoMSA9PSBNaW5IZWFwX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMt
Pm91dHN0cmVhbV96KSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9vdXRzdHJlYW1feiA9IG1hbGxv
YyhvdXRzdHJlYW1fc2l6ZV96KTsKCQkJaWYgKGFsaWduZWRfb3V0c3RyZWFtX3ogPT0gTlVMTCkg
ewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9f
TElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVh
bSAneiciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9k
YXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMt
Pm91dHN0cmVhbV96OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGln
bmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJlYW1fejsKCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRzdHJlYW1fc2l6ZV96OwoJ
CQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDE7CgkJ
CWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291dHN0cmVhbV96
OwoJCX0KCQltYXhfcXVldWVfb3V0cHV0KGFjdGlvbnMsICJ6Iiwgc3RyZWFtX3B0ciwgb3V0c3Ry
ZWFtX3NpemVfeik7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVh
bSB6ICovCgkKCWlmICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpj
YWxsYmFja19kYXRhID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9k
YXRhKTsKCX0KCXJldHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgTWlu
SGVhcCgKCWludDMyX3QgcGFyYW1fTiwKCWNvbnN0IGludDMyX3QgKmluc3RyZWFtX3gsCgljb25z
dCBpbnQzMl90ICppbnN0cmVhbV95LAoJaW50MzJfdCAqb3V0c3RyZWFtX3opCnsKCSh2b2lkKSBw
dGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIE1pbkhlYXBfc3RhdGljX2luaXQp
OwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCAp
OwoJbWF4X3J1bl90ICpydW4gPSBNaW5IZWFwX25vbmJsb2NrKHBhcmFtX04sIGluc3RyZWFtX3gs
IGluc3RyZWFtX3ksIG91dHN0cmVhbV96KTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1
biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqTWluSGVhcF9ub25i
bG9jaygKCWludDMyX3QgcGFyYW1fTiwKCWNvbnN0IGludDMyX3QgKmluc3RyZWFtX3gsCgljb25z
dCBpbnQzMl90ICppbnN0cmVhbV95LAoJaW50MzJfdCAqb3V0c3RyZWFtX3opCnsKCU1pbkhlYXBf
YWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fTiA9
IHBhcmFtX047CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV94ID0gaW5zdHJlYW1feDsKCWlu
dGVyZmFjZV9hY3Rpb25zLmluc3RyZWFtX3kgPSBpbnN0cmVhbV95OwoJaW50ZXJmYWNlX2FjdGlv
bnMub3V0c3RyZWFtX3ogPSBvdXRzdHJlYW1fejsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNf
YnNfaXNfaW5pdGlhbGlzZWQsIE1pbkhlYXBfc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9y
ZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxMKTsKCXZvaWQgKCpjYl9m
dW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhf
YWN0aW9uc190ICphY3Rpb25zID0gTWluSGVhcF9jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhm
aWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19O
VUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlk
YXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJS
T1JTX1NUKHN0b3JlZF9lbmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVu
YyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rp
b25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9l
bmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJV
bmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBO
VUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIE1p
bkhlYXBfcnVuKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglNaW5IZWFwX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gTWluSGVhcF9ydW5fbm9uYmxvY2so
ZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBy
dW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKk1pbkhlYXBfcnVu
X25vbmJsb2NrKAoJbWF4X2VuZ2luZV90ICplbmdpbmUsCglNaW5IZWFwX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5lX2dldF9t
YXhfZmlsZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAg
KmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gTWluSGVh
cF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVu
YywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlv
bnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rp
b25zLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1
biA9IG1heF9ydW5fbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0g
bWF4X3J1bl9ub25ibG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0
YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJ
bWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVm
IEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2Rl
ZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0g
W2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUg
YWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2
b2lkIE1pbkhlYXBfcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgTWluSGVhcF9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IE1pbkhlYXBfcnVuX2dy
b3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwg
IlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxi
cmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3Ig
dGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0
byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1
cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQg
d2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJv
aGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6
Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlv
bi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBp
bnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0
aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVy
cm9yLgogKi8KbWF4X3J1bl90ICpNaW5IZWFwX3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBf
dCAqZ3JvdXAsIE1pbkhlYXBfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2Zp
bGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3JvdXApOwoJbWF4X2FjdGlv
bnNfdCAqYWN0aW9ucyA9IE1pbkhlYXBfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZh
Y2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBO
VUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxp
ZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhn
cm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsK
fQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3Ig
dGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUg
YXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0
aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkgb2Yg
YWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNl
X2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZvaWQgTWlu
SGVhcF9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBNaW5IZWFwX2FjdGlvbnNf
dCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90ICpydW4gPSBNaW5IZWFwX3J1bl9h
cnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChy
dW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgog
KiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24g
Zm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRo
ZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGlt
bWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2gg
dGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hl
Y2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBv
bmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBj
YW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBk
ZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5
IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24g
c3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhf
cnVuX3QgKk1pbkhlYXBfcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJh
eSwgTWluSGVhcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3Qg
Km1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBp
OwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwg
ZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4
X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9m
KG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsr
ICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBNaW5IZWFwX2NvbnZlcnRfaW50ZXJuYWwo
bWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlmIChhY3Rp
b25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0gYWN0aW9uczsKCQlt
YXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9
IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsKCWZvciAoIGkgPSAw
IDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rp
b25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJfYWN0aW9u
cyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRl
cmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNf
dCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVu
Y3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAq
CiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2lu
XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVu
LgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVM
TCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogTWluSGVhcF9jb252ZXJ0KG1h
eF9maWxlX3QgKm1heGZpbGUsIE1pbkhlYXBfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykK
ewoJcmV0dXJuIE1pbkhlYXBfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0
aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJPUlNfU1QKI3VuZGVmIENI
RUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1929, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1930, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1952, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1953, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1961, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1962, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1970, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1971, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1979, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1980, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1988, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1989, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1997, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1998, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2006, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2007, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2015, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2016, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2024, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2025, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2033, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2034, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2971, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 9, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2696, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2697, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2970, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2698, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 15, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2700, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2035, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2036, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2702, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2703, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2704, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2037, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2893, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2706, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2707, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2040, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2067, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2884, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2892, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2718, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2969, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2968, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2711, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2710, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2069, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2714, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2894, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2895, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 144, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 263, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2716, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2717, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 264, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 274, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2088, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2089, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 275, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 278, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 145, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 149, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2721, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2722, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 279, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 280, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2723, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 281, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 284, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2899, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2896, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 285, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 286, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2726, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 287, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 316, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 319, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 320, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2897, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2898, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 321, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2737, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2967, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2966, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2730, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2885, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 324, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 327, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 328, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2733, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 310, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 313, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 314, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 315, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2900, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2901, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 329, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 448, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2735, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2736, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 449, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 459, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 460, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 463, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 330, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 333, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 334, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 335, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2740, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2741, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 464, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 465, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2742, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2177, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 466, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 469, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2905, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2902, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 470, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 471, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2745, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 472, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2180, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 501, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2207, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 504, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 505, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2903, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2904, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 506, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2756, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2965, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2964, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2749, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2886, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 509, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2209, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 512, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 513, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2752, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 495, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 498, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 499, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 500, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2906, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2907, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 514, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 633, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2754, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2755, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 634, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 644, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2228, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2229, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 645, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 648, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 515, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 518, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 519, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 520, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2759, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2760, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 649, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 650, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2761, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2247, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 651, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 654, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2911, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2908, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 655, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 656, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2764, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 657, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2250, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 686, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2277, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 689, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 690, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2909, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2910, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 691, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2775, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2963, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2962, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2768, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2887, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 694, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2279, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 697, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 698, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2771, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 680, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 683, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 684, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 685, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2912, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2913, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 699, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 818, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2773, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2774, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 819, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 829, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2298, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2299, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 830, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 833, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 700, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 703, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 704, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 705, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2778, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2779, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 834, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 835, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2780, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2317, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 836, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 839, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2917, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2914, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 840, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 841, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2783, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 842, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2320, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 871, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2347, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 874, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 875, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2915, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2916, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 876, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2794, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2961, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2960, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2787, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2888, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 879, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2349, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 882, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 883, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2790, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 865, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 868, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 869, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 870, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2918, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2919, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 884, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1003, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2792, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2793, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1004, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1014, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2368, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2369, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1015, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1018, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 885, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 888, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 889, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 890, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2797, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2798, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1019, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1020, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2799, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2387, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1021, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1024, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2923, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2920, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1025, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1026, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2802, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1027, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2390, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1056, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2417, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1059, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1060, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2921, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2922, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1061, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2813, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2959, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2958, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2806, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2889, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1064, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2419, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1067, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1068, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2809, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1050, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1053, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1054, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1055, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2924, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2925, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1069, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1188, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2811, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2812, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1189, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1199, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2438, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2439, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1200, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1203, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1070, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1073, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1074, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1075, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2816, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2817, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1204, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1205, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2818, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2457, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1206, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1209, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2929, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2926, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1210, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1211, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2821, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1212, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2460, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1241, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2487, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1244, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1245, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2927, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2928, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1246, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2832, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2957, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2956, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2825, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2890, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1249, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2489, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1252, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1253, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2828, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1235, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1238, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1239, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1240, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2930, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2931, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1254, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1373, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2830, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2831, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1374, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1384, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2508, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2509, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1385, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1388, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1255, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1258, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1259, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1260, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2835, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2836, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1389, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1390, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2837, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2527, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1391, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1394, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2935, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2932, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1395, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1396, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2840, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1397, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2530, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1426, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2557, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1429, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1430, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2933, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2934, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1431, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2851, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2955, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2954, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2844, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2891, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1434, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2559, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1437, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1438, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2847, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1420, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1423, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1424, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1425, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2936, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2937, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1439, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1558, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2849, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2850, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1559, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1569, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2578, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2579, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1570, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1573, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1440, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1443, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1444, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1445, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2854, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2855, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1574, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1575, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2856, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2597, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1576, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1579, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2941, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2938, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1580, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1581, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2859, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1582, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2600, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1611, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2627, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1614, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1615, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2939, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2940, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1616, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2871, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2953, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2952, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2863, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2868, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1619, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2629, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1622, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1623, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2866, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1605, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1608, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1609, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1610, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2942, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2943, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1624, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1743, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2869, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2946, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1744, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1754, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2648, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2649, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1755, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1758, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1625, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1628, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1629, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1630, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2874, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2875, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1759, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1760, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2876, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2667, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1761, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1764, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2948, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2944, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1765, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1766, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2879, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1767, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2670, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1804, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2683, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1807, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1808, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2882, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1790, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2685, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1793, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1794, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2947, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2945, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1795, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2949, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1809, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1932, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1937, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2951, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1934, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1935, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1936, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1938, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2950, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1940, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1941, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1943, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1944, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1942, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c0214223b5a3c21e2ebc387d59587765f14472150163502145293dcc47ed4840bb9ce0055ec2829205f9f7302")
#endif

