#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "MinHeap"
#define MAXFILE_BUILD_DIR  "/tmp/MinHeap_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20160607
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 35)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "MinHeapKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(MinHeapKernel, Kernel)
MANAGER_NODE(y, PCIe_From_Host)
MANAGER_NODE(z, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_8, Fifo)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(MinHeapKernel, y, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(MinHeapKernel, z, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(y, y, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(z, z, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(y, y, Stream_8, input, 128)
MANAGER_STREAM(MinHeapKernel, z, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, z, z, 128)
MANAGER_STREAM(Stream_8, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_10, output, MinHeapKernel, y, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(MinHeapKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(y, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(z, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(MinHeapKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(MinHeapKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(MinHeapKernel, MinHeapKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(MinHeapKernel, y, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(MinHeapKernel, z, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(y, PCIePushSourceSyncMax4, "y")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, FifoPushToPullSync, "Stream_8", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(MinHeapKernel, MinHeapKernel, "MinHeapKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(z, PCIePushSinkSyncMax3, "z")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 35)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "d1bd1c0e212b0b3a298ec45a51c4cf54d0b16bf5ab7e246ae3cc1979bccd218a")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_fill_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flush_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flush_start_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_full_level, 8, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(MinHeapKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(y, STREAM_FROM_HOST, 0)
PCIE_STREAM(z, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(MinHeapKernel.io_y_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MinHeapKernel.io_z_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(MinHeapKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MinHeapKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(MinHeapKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1))
REG(MinHeapKernel.dbg_ctld_done, 0xf, 1, hwBits(1))
REG(MinHeapKernel.dbg_ctld_empty, 0x10, 1, hwBits(1))
REG(MinHeapKernel.dbg_ctld_read, 0x11, 1, hwBits(1))
REG(MinHeapKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3))
REG(MinHeapKernel.dbg_ctld_request, 0x13, 1, hwBits(1))
REG(MinHeapKernel.dbg_done_out, 0x14, 1, hwBits(1))
REG(MinHeapKernel.dbg_fill_level, 0x15, 1, hwBits(8))
REG(MinHeapKernel.dbg_flush_level, 0x16, 1, hwBits(8))
REG(MinHeapKernel.dbg_flush_start, 0x17, 1, hwBits(1))
REG(MinHeapKernel.dbg_flush_start_level, 0x18, 1, hwBits(8))
REG(MinHeapKernel.dbg_flushing, 0x19, 1, hwBits(1))
REG(MinHeapKernel.dbg_full_level, 0x1a, 1, hwBits(8))
REG(MinHeapKernel.dbg_out_stall, 0x1b, 1, hwBits(1))
REG(MinHeapKernel.dbg_out_valid, 0x1c, 1, hwBits(1))
REG(MinHeapKernel.dbg_stall_vector, 0x1d, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(MinHeapKernel.io_y_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MinHeapKernel.io_z_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(MinHeapKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(MinHeapKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_done, 0xf, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_empty, 0x10, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_read, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_ctld_request, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_done_out, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_fill_level, 0x15, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flush_level, 0x16, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flush_start, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flush_start_level, 0x18, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_flushing, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_full_level, 0x1a, 1, hwBits(8), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_out_stall, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_out_valid, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(MinHeapKernel.dbg_stall_vector, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("d1bd1c0e212b0b3a298ec45a51c4cf54d0b16bf5ab7e246ae3cc1979bccd218a")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME MinHeap
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_MinHeap_H
#define SLIC_DECLARATIONS_MinHeap_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define MinHeap_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_y The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_z The stream should be of size (param_N * 4) bytes.
 */
void MinHeap(
	int32_t param_N,
	const int32_t *instream_y,
	int32_t *outstream_z);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".: Number of data items to process
 * \param [in] instream_y The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_z The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *MinHeap_nonblock(
	int32_t param_N,
	const int32_t *instream_y,
	int32_t *outstream_z);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_N; /**<  [in] Interface Parameter "N".: Number of data items to process */
	const int32_t *instream_y; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	int32_t *outstream_z; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} MinHeap_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void MinHeap_run(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_nonblock(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MinHeap_run_group(max_group_t *group, MinHeap_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_group_nonblock(max_group_t *group, MinHeap_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MinHeap_run_array(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_array_nonblock(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MinHeap_convert(max_file_t *maxfile, MinHeap_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* MinHeap_init(void);

/* Error handling functions */
int MinHeap_has_errors(void);
const char* MinHeap_get_errors(void);
void MinHeap_clear_errors(void);
/* Free statically allocated maxfile data */
void MinHeap_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int MinHeap_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int MinHeap_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_MinHeap_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(MinHeapKernel, 1919, NodeInputMappedReg, "Scalar input (io_z_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:94)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1920, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:94)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1942, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1943, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1951, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1952, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1960, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1961, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1969, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1970, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1978, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1979, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1987, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1988, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1996, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1997, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2005, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2006, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2014, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2015, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2024, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:73)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 4, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:17)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2947, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:16)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2, NodeConstantRawBits, "{HWOffsetFix:33, 0, UNSIGNED}\n0x100000000; 4.294967296E9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:16)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 3, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:16)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2946, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 11, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 5, NodeInputMappedReg, "Scalar input (io_y_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:29)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 6, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:29)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 7, NodeInput, "Input(y)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:29)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 13, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 68, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2688, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 69, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 79, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2025, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2026, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 80, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 83, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2689, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 84, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 85, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2690, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2027, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 86, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2032, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 121, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2059, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 124, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 125, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2691, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2871, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2872, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 126, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2945, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 15, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2944, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 17, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2694, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2693, NodeFIFO, "FIFO(10)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 18, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 19, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 129, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2061, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 132, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 133, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2696, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 115, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 118, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 119, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 120, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 134, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 253, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2697, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2698, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 254, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 264, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2080, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2081, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 265, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 268, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 135, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 138, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 139, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2699, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 140, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2701, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2702, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 269, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 270, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2703, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2099, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 271, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 274, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2875, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2705, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 275, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 276, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2706, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 277, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2102, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 306, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2129, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 309, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 310, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2873, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2874, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 311, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2717, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2943, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 21, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2942, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 23, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2710, NodeFIFO, "FIFO(24)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2864, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 24, NodeStreamOffset, "stream offset: 2", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 25, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 314, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2131, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 317, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 318, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2713, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 300, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 303, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 304, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 305, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2876, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2877, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 319, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 438, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2715, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2716, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 439, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 449, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2150, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2151, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 450, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 453, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 320, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 323, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 324, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 325, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2720, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2721, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 454, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 455, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2722, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2169, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 456, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 459, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2881, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2878, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 460, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 461, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2725, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 462, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2172, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 491, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2199, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 494, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 495, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2879, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2880, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 496, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2736, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2941, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000003; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 27, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2940, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 29, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2729, NodeFIFO, "FIFO(38)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2865, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 30, NodeStreamOffset, "stream offset: 3", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 31, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 499, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2201, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 502, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 503, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2732, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 485, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 488, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 489, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 490, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2882, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2883, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 504, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 623, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2734, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2735, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 624, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 634, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2220, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2221, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 635, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 638, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 505, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 508, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 509, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 510, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2739, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2740, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 639, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 640, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2741, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2239, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 641, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 644, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2887, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2884, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 645, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 646, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2744, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 647, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2242, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 676, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2269, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 679, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 680, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2885, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2886, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 681, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2755, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2939, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000004; 4.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 33, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2938, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 35, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2748, NodeFIFO, "FIFO(52)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2866, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 36, NodeStreamOffset, "stream offset: 4", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 37, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 684, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2271, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 687, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 688, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2751, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 670, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 673, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 674, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 675, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2888, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2889, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 689, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 808, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2753, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2754, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 809, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 819, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2290, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2291, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 820, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 823, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 690, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 693, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 694, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 695, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2758, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2759, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 824, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 825, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2760, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2309, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 826, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 829, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2893, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2890, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 830, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 831, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2763, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 832, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2312, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 861, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2339, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 864, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 865, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2891, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2892, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 866, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2774, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2937, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000005; 5.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 39, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2936, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 41, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2767, NodeFIFO, "FIFO(66)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2867, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 42, NodeStreamOffset, "stream offset: 5", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 43, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 869, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2341, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 872, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 873, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2770, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 855, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 858, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 859, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 860, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2894, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2895, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 874, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 993, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2772, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2773, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 994, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1004, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2360, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2361, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1005, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1008, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 875, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 878, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 879, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 880, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2777, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2778, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1009, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1010, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2779, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2379, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1011, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1014, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2899, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2896, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1015, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1016, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2782, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1017, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2382, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1046, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2409, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1049, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1050, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2897, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2898, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1051, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2793, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2935, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000006; 6.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 45, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2934, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 47, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2786, NodeFIFO, "FIFO(80)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2868, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 48, NodeStreamOffset, "stream offset: 6", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 49, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1054, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2411, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1057, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1058, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2789, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1040, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1043, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1044, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1045, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2900, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2901, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1059, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1178, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2791, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2792, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1179, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1189, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2430, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2431, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1190, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1193, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1060, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1063, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1064, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1065, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2796, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2797, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1194, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1195, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2798, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2449, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1196, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1199, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2905, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2902, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1200, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1201, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2801, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1202, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2452, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1231, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2479, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1234, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1235, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2903, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2904, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1236, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2812, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2933, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000007; 7.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 51, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2932, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 53, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2805, NodeFIFO, "FIFO(94)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2869, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 54, NodeStreamOffset, "stream offset: 7", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 55, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1239, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2481, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1242, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1243, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2808, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1225, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1228, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1229, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1230, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2906, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2907, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1244, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1363, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2810, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2811, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1364, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1374, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2500, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2501, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1375, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1378, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1245, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1248, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1249, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1250, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2815, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2816, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1379, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1380, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2817, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2519, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1381, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1384, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2911, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2908, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1385, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1386, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2820, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1387, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2522, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1416, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2549, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1419, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1420, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2909, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2910, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1421, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2831, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2931, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000008; 8.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 57, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2930, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 59, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2824, NodeFIFO, "FIFO(108)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2870, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 60, NodeStreamOffset, "stream offset: 8", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 61, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1424, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2551, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1427, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1428, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2827, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1410, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1413, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1414, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1415, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2912, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2913, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1429, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1548, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2829, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2830, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1549, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1559, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2570, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2571, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1560, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1563, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1430, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1433, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1434, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1435, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2834, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2835, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1564, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1565, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2836, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2589, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1566, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1569, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2917, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2914, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1570, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1571, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2839, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1572, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2592, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1601, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2619, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1604, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1605, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2915, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2916, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1606, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2851, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2929, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000009; 9.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 63, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2928, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 65, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2843, NodeFIFO, "FIFO(109)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 66, NodeStreamOffset, "stream offset: 9", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 67, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:32)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2848, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1609, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2621, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1612, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1613, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2846, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1595, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1598, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1599, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1600, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2918, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2919, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1614, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1733, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:784)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2849, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2922, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1734, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:41)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1744, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2640, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:66)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2641, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:64)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1745, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:68)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1748, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1615, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1618, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1619, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1620, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:87)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2854, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2855, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1749, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1750, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2856, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2659, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:65)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1751, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1754, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2924, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2920, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1755, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1756, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2859, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1757, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:74)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2662, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:61)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1794, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2675, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000002; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1797, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1798, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2862, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1780, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:635)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2677, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:891)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:85)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1783, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1784, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2923, NodeFIFO, "FIFO(8)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2921, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1785, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2925, NodeFIFO, "FIFO(6)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1799, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1160)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:86)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1922, NodeOutput, "Output(z)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nminheap.MinHeapKernel.<init>(MinHeapKernel.maxj:94)\nminheap.MinHeapManager.main(MinHeapManager.maxj:10)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1927, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2927, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1924, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1925, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1926, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1928, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 2926, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1930, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1931, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1933, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1934, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
PHOTON_NODE_DATA(MinHeapKernel, 1932, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nminheap.MinHeapManager.main(MinHeapManager.maxj:13)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int MinHeap_has_errors(void)
{	return stored_has_error; }
const char* MinHeap_get_errors(void)
{	return stored_error; }
void MinHeap_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char MinHeap_use_simulation[16];
static void MinHeap_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(MinHeap_use_simulation, 16, "MinHeap_%05ld_", pid);
}
static const char *MinHeap_check_use_simulation(void)
{
	MinHeap_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = MinHeap_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int MinHeap_simulation_launch = 0;
int MinHeap_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = MinHeap_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int MinHeap_simulator_stop(void)
{
	const char *use_sim = MinHeap_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void MinHeap_static_init(void) 
{
	stored_maxfile = MinHeap_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = MinHeap_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = MinHeap_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			MinHeap_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void MinHeap_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (MinHeap_simulation_launch == 1) {
		int sim_stat = MinHeap_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		MinHeap_simulation_launch = 0;
	}
}

static int MinHeap_get_pcie_alignment(void)
{
#ifdef MinHeap_PCIE_ALIGNMENT
	return ((MinHeap_PCIE_ALIGNMENT < 1) ? 16 : MinHeap_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int MinHeap_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = MinHeap_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *MinHeap_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = MinHeap_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct MinHeap_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} MinHeap_callback_stream_t;

typedef struct MinHeap_callback_data {
	MinHeap_callback_stream_t stream[2]; 
	int count;
	int max_count;
} MinHeap_callback_data_t;

static void MinHeap_callback_internal(void *cb_data)
{
	MinHeap_callback_data_t *data = (MinHeap_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		MinHeap_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* MinHeap_convert_internal(
	max_file_t *maxfile,
	MinHeap_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	MinHeap_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(MinHeap_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function MinHeap_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &MinHeap_callback_internal;
	}

	int32_t param_N = interface_actions->param_N;
	
	/* code for scalar MinHeapKernel.run_cycle_count */
	uint64_t ticks_MinHeapKernel = param_N;
	max_set_ticks(actions, "MinHeapKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar MinHeapKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream y */
	size_t instream_size_y = tmp_0;
	if (instream_size_y > 0) {
		const int32_t *stream_ptr = interface_actions->instream_y;
		if (use_callback && (1 == MinHeap_check_aligned(interface_actions->instream_y))) {
			int32_t *aligned_instream_y = malloc(instream_size_y);
			if (aligned_instream_y == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'y'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_y;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_y;
			(&cb_data->stream[cb_data->count])->size        = instream_size_y;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_y, interface_actions->instream_y, instream_size_y);
			stream_ptr = aligned_instream_y;
		}
		max_queue_input(actions, "y", stream_ptr, instream_size_y);
		CHECK_ERRORS;
	}
	/* end of code for stream y */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream z */
	size_t outstream_size_z = tmp_1;
	if (outstream_size_z > 0) {
		int32_t *stream_ptr = interface_actions->outstream_z;
		if (use_callback && (1 == MinHeap_check_aligned(interface_actions->outstream_z))) {
			int32_t *aligned_outstream_z = malloc(outstream_size_z);
			if (aligned_outstream_z == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'z'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_z;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_z;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_z;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_z;
		}
		max_queue_output(actions, "z", stream_ptr, outstream_size_z);
		CHECK_ERRORS;
	}
	/* end of code for stream z */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void MinHeap(
	int32_t param_N,
	const int32_t *instream_y,
	int32_t *outstream_z)
{
	(void) pthread_once(&slic_bs_is_initialised, MinHeap_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = MinHeap_nonblock(param_N, instream_y, outstream_z);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MinHeap_nonblock(
	int32_t param_N,
	const int32_t *instream_y,
	int32_t *outstream_z)
{
	MinHeap_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_y = instream_y;
	interface_actions.outstream_z = outstream_z;
	(void) pthread_once(&slic_bs_is_initialised, MinHeap_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MinHeap_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void MinHeap_run(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions)
{
	max_run_t *run = MinHeap_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *MinHeap_run_nonblock(
	max_engine_t *engine,
	MinHeap_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = MinHeap_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void MinHeap_run_group(max_group_t *group, MinHeap_actions_t *interface_actions)
{
	max_run_t *run = MinHeap_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_group_nonblock(max_group_t *group, MinHeap_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = MinHeap_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void MinHeap_run_array(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[])
{
	max_run_t *run = MinHeap_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *MinHeap_run_array_nonblock(max_engarray_t *engarray, MinHeap_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = MinHeap_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* MinHeap_convert(max_file_t *maxfile, MinHeap_actions_t *interface_actions)
{
	return MinHeap_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, N, param_N)	
SLIC_SET_TICKS(MinHeapKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(y, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(z, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9Ik1pbkhlYXAuaCIgbmFtZT0i
TWluSGVhcCI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBlPSJsb25nIiB2YWx1
ZT0iMTYiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZhdWx0Ij48ZnVuY3Rpb24gbmFtZT0iTWluSGVh
cCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIg
JnF1b3Q7TiZxdW90Oy46IE51bWJlciBvZiBkYXRhIGl0ZW1zIHRvIHByb2Nlc3MiIGRpcmVjdGlv
bj0iSW5wdXQiIG5hbWU9InBhcmFtX04iIHR5cGU9ImludDMyX3QiLz48YXJyYXkgZGVzYz0iVGhl
IHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9u
PSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1feSIgc2l6ZT0iKHBhcmFtX04gKiA0KSIgdHJhbnNwb3Nl
PSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5j
dGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9O
ICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9Iioi
IHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9OIi8+PGNvbnN0
YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxj
b25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2Fs
bD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNo
b3VsZCBiZSBvZiBzaXplIChwYXJhbV9OICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIg
bmFtZT0ib3V0c3RyZWFtX3oiIHNpemU9IihwYXJhbV9OICogNCkiIHRyYW5zcG9zZT0idHJ1ZSIg
dHlwZT0iaW50MzJfdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxs
PjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9IigocGFyYW1fTiAqIDQpIC8g
NCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0i
KHBhcmFtX04gKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fTiIvPjxjb25zdGFudFZhbHVl
IHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRW
YWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PC9sZW5n
dGg+PC9kaW1lbnNpb24+PC9hcnJheT48L2Z1bmN0aW9uPjwvZW5naW5lbW9kZT48L21heGZpbGU+

#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBNaW5IZWFwX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hhc19lcnJv
cjsgfQpjb25zdCBjaGFyKiBNaW5IZWFwX2dldF9lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVk
X2Vycm9yOyB9CnZvaWQgTWluSGVhcF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRf
ZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9Cgpz
dGF0aWMgY2hhciBNaW5IZWFwX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGljIHZvaWQgTWluSGVh
cF9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBpZCgp
KSAlIDEwMDAwMDsKCXNucHJpbnRmKE1pbkhlYXBfdXNlX3NpbXVsYXRpb24sIDE2LCAiTWluSGVh
cF8lMDVsZF8iLCBwaWQpOwp9CnN0YXRpYyBjb25zdCBjaGFyICpNaW5IZWFwX2NoZWNrX3VzZV9z
aW11bGF0aW9uKHZvaWQpCnsKCU1pbkhlYXBfZGVmX3VzZV9zaW11bGF0aW9uKCk7Cgljb25zdCBj
aGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5nKE1BWF9DT05GSUdfVVNFX1NJTVVM
QVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVzZV9zaW0gPSBNaW5IZWFwX3VzZV9z
aW11bGF0aW9uOwoJCW1heF9jb25maWdfc2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFU
SU9OLCB1c2Vfc2ltKTsKCX0KCXJldHVybiB1c2Vfc2ltOwp9CgpzdGF0aWMgaW50IE1pbkhlYXBf
c2ltdWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgTWluSGVhcF9zaW11bGF0b3Jfc3RhcnQodm9pZCkK
ewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gTWluSGVhcF9jaGVja191
c2Vfc2ltdWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwg
IlBBVEg9c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVg0ODQ4
QSAtUyBzaW11dGlscyByZXN0YXJ0IiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4o
YnVmZiwgInIiKTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBm
YWlsZWQgdG8gZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihi
dWZmKTsKCQlyZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkg
IT0gTlVMTCkgewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBv
dXRwdXQgKi8KCQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7ICovCgkJaWYgKHN0cnN0cihidWZm
LCAiRXJyb3IiKSkgewoJCQlzZXRfZXJyb3IoYnVmZik7CgkJCXJldHZhbCA9IC0xOwoJCX0KCX0K
CXBjbG9zZShwaXBlX2ZwKTsKCXJldHVybiByZXR2YWw7Cn0KCmludCBNaW5IZWFwX3NpbXVsYXRv
cl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBNaW5IZWFwX2NoZWNrX3VzZV9z
aW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZmLCAxMDI0LCAiUEFU
SD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1jIE1BWDQ4NDhBIC1T
IHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3BlbihidWZmLCAi
ciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6IGZhaWxlZCB0
byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9yKGJ1ZmYpOwoJ
CXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2ZwKSAhPSBOVUxM
KSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5kIG91dHB1dCAq
LwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2UocGlwZV9mcCk7
CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgTWluSGVhcF9zdGF0aWNfaW5pdCh2b2lkKSAKewoJ
c3RvcmVkX21heGZpbGUgPSBNaW5IZWFwX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBO
VUxMIHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRfbWF4Zmls
ZSA9IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRF
UkZBQ0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJs
ZSB0byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9nbG9iYWxf
ZXJyb3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UobWF4X2ds
b2JhbF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9ib29sKE1B
WF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vycm9yc19t
b2RlKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJldmlvdXMg
PSBtYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFyICp1c2Vf
c2ltID0gTWluSGVhcF9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1heF9waW5nX2RhZW1v
bihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1fc3RhdCA9IE1pbkhl
YXBfc2ltdWxhdG9yX3N0YXJ0KCk7CgkJaWYgKChzaW1fc3RhdCA9PSAwKSAmJiAobWF4X3Bpbmdf
ZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAxKSkgewoJCQlNaW5IZWFwX3NpbXVs
YXRpb25fbGF1bmNoID0gMTsKCQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJv
ciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1
Y3R1cmUgYXV0b21hdGljYWxseS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAn
dXNlX3NpbXVsYXRpb249PHNpbXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3Vy
IFNMaUMgY29uZmlndXJhdGlvbiIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUg
YXNzb2NpYXRlZCBzaW11bGF0ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhf
ZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQly
ZXR1cm47CgkJfQoJfQoJc3RvcmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAi
KiIpOwoJaWYgKCFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29u
ZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikp
IHsKCQkJZnByaW50ZihzdGRlcnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcg
bm93LlxuXG4iKTsKCQkJZmZsdXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJ
c2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9y
cykpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUg
PSBOVUxMOwoJCQlyZXR1cm47CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhm
aWxlLCB0aW1lb3V0X3ByZXZpb3VzKTsKfQp2b2lkIE1pbkhlYXBfZnJlZSh2b2lkKQp7CglpZiAo
c3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9hZChzdG9yZWRfZW5naW5lKTsKCQlz
dG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfbWF4ZmlsZSAhPSBOVUxMKSB7CgkJ
bWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJ
fQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJlZShzdG9yZWRfZXJyb3IpOwoJCXN0
b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAoTWluSGVhcF9zaW11bGF0aW9uX2xhdW5jaCA9PSAx
KSB7CgkJaW50IHNpbV9zdGF0ID0gTWluSGVhcF9zaW11bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1f
c3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIkVycm9yIHN0b3BwaW5nIHNpbXVsYXRv
ci4iKTsKCQl9CgkJTWluSGVhcF9zaW11bGF0aW9uX2xhdW5jaCA9IDA7Cgl9Cn0KCnN0YXRpYyBp
bnQgTWluSGVhcF9nZXRfcGNpZV9hbGlnbm1lbnQodm9pZCkKewojaWZkZWYgTWluSGVhcF9QQ0lF
X0FMSUdOTUVOVAoJcmV0dXJuICgoTWluSGVhcF9QQ0lFX0FMSUdOTUVOVCA8IDEpID8gMTYgOiBN
aW5IZWFwX1BDSUVfQUxJR05NRU5UKTsKI2Vsc2UKCXJldHVybiAxNjsKI2VuZGlmCn0KCnN0YXRp
YyBpbnQgTWluSGVhcF9jaGVja19hbGlnbmVkKGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJf
dCBwb2ludGVyID0gKHVpbnRwdHJfdCkgZGF0YTsKCWludCBhbGlnbm1lbnQgPSBNaW5IZWFwX2dl
dF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2ludGVyICUgYWxpZ25tZW50KSA/IDEgOiAw
Owp9CgpzdGF0aWMgdm9pZCAqTWluSGVhcF9tYWxsb2NfYWxpZ25lZChjb25zdCBzaXplX3Qgc2l6
ZSkKewoJdm9pZCAqcHRyOwoJaW50IGFsaWdubWVudCA9IE1pbkhlYXBfZ2V0X3BjaWVfYWxpZ25t
ZW50KCk7Cglwb3NpeF9tZW1hbGlnbigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0
cjsKfQoKCgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0gSW50ZXJmYWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwov
Ki0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVU
KSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NP
TkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwg
IiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJy
b3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0g
CiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxM
KSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9B
Qk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJy
b3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0
X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IE1pbkhlYXBf
Y2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9w
dHI7CglzaXplX3QgICBzaXplOwoJaW50ICAgICAgaXNfb3V0cHV0Owp9IE1pbkhlYXBfY2FsbGJh
Y2tfc3RyZWFtX3Q7Cgp0eXBlZGVmIHN0cnVjdCBNaW5IZWFwX2NhbGxiYWNrX2RhdGEgewoJTWlu
SGVhcF9jYWxsYmFja19zdHJlYW1fdCBzdHJlYW1bMl07IAoJaW50IGNvdW50OwoJaW50IG1heF9j
b3VudDsKfSBNaW5IZWFwX2NhbGxiYWNrX2RhdGFfdDsKCnN0YXRpYyB2b2lkIE1pbkhlYXBfY2Fs
bGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJTWluSGVhcF9jYWxsYmFja19kYXRhX3Qg
KmRhdGEgPSAoTWluSGVhcF9jYWxsYmFja19kYXRhX3QqKSBjYl9kYXRhOwoJZm9yIChpbnQgaSA9
IDAgOyBpIDwgZGF0YS0+Y291bnQgOyBpKysgKSB7CgkJTWluSGVhcF9jYWxsYmFja19zdHJlYW1f
dCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+
IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJ
CX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhf
YWN0aW9uc190KiBNaW5IZWFwX2NvbnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxl
LAoJTWluSGVhcF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zLAoJaW50ICBpc19pbnRlcm5h
bF9jYWxsLAoJdm9pZCAoKipjYWxsYmFja19mdW5jKSh2b2lkKiksCgl2b2lkICoqY2FsbGJhY2tf
ZGF0YSkKewoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25zX2luaXQobWF4Zmls
ZSwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoKI2RlZmluZSBDSEVD
S19FUlJPUlMgaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNldF9lcnJvcl9hbmRfZnJl
ZShtYXhfZXJyb3JzX3RyYWNlKGFjdGlvbnMtPmVycm9ycykpOyByZXR1cm4gTlVMTDsgfSAKCglN
aW5IZWFwX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNr
ID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7Cglp
ZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoTWluSGVhcF9jYWxs
YmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJy
LCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4g
ZnVuY3Rpb24gTWluSGVhcF9jb252ZXJ0X2ludGVybmFsXG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJ
fQoJCWNiX2RhdGEtPm1heF9jb3VudCA9IDI7CgkJY2JfZGF0YS0+Y291bnQgICAgID0gMDsKCQkq
Y2FsbGJhY2tfZGF0YSAgICAgPSBjYl9kYXRhOwoJCSpjYWxsYmFja19mdW5jICAgICA9ICZNaW5I
ZWFwX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWludDMyX3QgcGFyYW1fTiA9IGludGVyZmFjZV9h
Y3Rpb25zLT5wYXJhbV9OOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIgTWluSGVhcEtlcm5lbC5ydW5f
Y3ljbGVfY291bnQgKi8KCXVpbnQ2NF90IHRpY2tzX01pbkhlYXBLZXJuZWwgPSBwYXJhbV9OOwoJ
bWF4X3NldF90aWNrcyhhY3Rpb25zLCAiTWluSGVhcEtlcm5lbCIsIHBhcmFtX04pOwoJQ0hFQ0tf
RVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBNaW5IZWFwS2VybmVsLnJ1bl9jeWNs
ZV9jb3VudCovCgkKCWludDY0X3QgdG1wXzAgPSAocGFyYW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZv
ciBzdHJlYW0geSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfeSA9IHRtcF8wOwoJaWYgKGluc3Ry
ZWFtX3NpemVfeSA+IDApIHsKCQljb25zdCBpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNl
X2FjdGlvbnMtPmluc3RyZWFtX3k7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBNaW5IZWFw
X2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3kpKSkgewoJCQlpbnQz
Ml90ICphbGlnbmVkX2luc3RyZWFtX3kgPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV95KTsKCQkJaWYg
KGFsaWduZWRfaW5zdHJlYW1feSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMo
YWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxv
Y2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICd5JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJ
CQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0g
KHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1feTsKCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRf
aW5zdHJlYW1feTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAg
ICAgICAgPSBpbnN0cmVhbV9zaXplX3k7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNv
dW50XSktPmlzX291dHB1dCAgID0gMDsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5
KGFsaWduZWRfaW5zdHJlYW1feSwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3ksIGluc3Ry
ZWFtX3NpemVfeSk7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX2luc3RyZWFtX3k7CgkJfQoJCW1h
eF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAieSIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfeSk7
CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB5ICovCgkKCWlu
dDY0X3QgdG1wXzEgPSAocGFyYW1fTiAqIDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0geiAqLwoJ
c2l6ZV90IG91dHN0cmVhbV9zaXplX3ogPSB0bXBfMTsKCWlmIChvdXRzdHJlYW1fc2l6ZV96ID4g
MCkgewoJCWludDMyX3QgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFt
X3o7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBNaW5IZWFwX2NoZWNrX2FsaWduZWQoaW50
ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV96KSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9vdXRz
dHJlYW1feiA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV96KTsKCQkJaWYgKGFsaWduZWRfb3V0c3Ry
ZWFtX3ogPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9y
cywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBt
ZW1vcnkgZm9yIHN0cmVhbSAneiciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50
ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV96OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRh
LT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJlYW1fejsK
CQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRz
dHJlYW1fc2l6ZV96OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19v
dXRwdXQgICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGln
bmVkX291dHN0cmVhbV96OwoJCX0KCQltYXhfcXVldWVfb3V0cHV0KGFjdGlvbnMsICJ6Iiwgc3Ry
ZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfeik7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9m
IGNvZGUgZm9yIHN0cmVhbSB6ICovCgkKCWlmICh1c2VfY2FsbGJhY2sgJiYgY2JfZGF0YS0+Y291
bnQgPT0gMCkgewoJCSpjYWxsYmFja19kYXRhID0gTlVMTDsKCQkqY2FsbGJhY2tfZnVuYyA9IE5V
TEw7CgkJZnJlZShjYl9kYXRhKTsKCX0KCXJldHVybiBhY3Rpb25zOwojdW5kZWYgQ0hFQ0tfRVJS
T1JTCn0KCnZvaWQgTWluSGVhcCgKCWludDMyX3QgcGFyYW1fTiwKCWNvbnN0IGludDMyX3QgKmlu
c3RyZWFtX3ksCglpbnQzMl90ICpvdXRzdHJlYW1feikKewoJKHZvaWQpIHB0aHJlYWRfb25jZSgm
c2xpY19ic19pc19pbml0aWFsaXNlZCwgTWluSGVhcF9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxM
KHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3Qg
KnJ1biA9IE1pbkhlYXBfbm9uYmxvY2socGFyYW1fTiwgaW5zdHJlYW1feSwgb3V0c3RyZWFtX3op
OwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQo
cnVuKTsKfQoKbWF4X3J1bl90ICpNaW5IZWFwX25vbmJsb2NrKAoJaW50MzJfdCBwYXJhbV9OLAoJ
Y29uc3QgaW50MzJfdCAqaW5zdHJlYW1feSwKCWludDMyX3QgKm91dHN0cmVhbV96KQp7CglNaW5I
ZWFwX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rpb25zLnBhcmFt
X04gPSBwYXJhbV9OOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1feSA9IGluc3RyZWFtX3k7
CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1feiA9IG91dHN0cmVhbV96OwoJKHZvaWQpIHB0
aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgTWluSGVhcF9zdGF0aWNfaW5pdCk7
CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5V
TEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAg
ICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBNaW5IZWFwX2NvbnZlcnRfaW50
ZXJuYWwoc3RvcmVkX21heGZpbGUsICZpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZj
Yl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25zIiwg
TlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywg
TlVMTCk7CglDSEVDS19FUlJPUlNfU1Qoc3RvcmVkX2VuZ2luZSwgTlVMTCk7CgltYXhfcnVuX3Qg
KnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrKHN0
b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2Nr
X3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglD
SEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJQ0hFQ0tfRVJS
T1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVy
biBydW47Cn0KCnZvaWQgTWluSGVhcF9ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCU1pbkhl
YXBfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBNaW5I
ZWFwX3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwo
cnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9y
dW5fdCAqTWluSGVhcF9ydW5fbm9uYmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCU1pbkhl
YXBfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9
IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQq
KSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3Qg
KmFjdGlvbnMgPSBNaW5IZWFwX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2Fj
dGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFjdGlvbnMsICJVbmFi
bGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJQ0hF
Q0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVu
YyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJ
fSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rpb25z
LCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBh
Y3Rpb25zIiwgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsK
fQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3Ig
dGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0
byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1
bi4KICoKICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGlu
IHRoZSBncm91cC4KICovCnZvaWQgTWluSGVhcF9ydW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3Vw
LCBNaW5IZWFwX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVu
ID0gTWluSGVhcF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGludGVyZmFjZV9hY3Rpb25zKTsK
CUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1
bik7Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2Nr
aW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVk
dWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0
aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVu
IG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dhaXQuIAogKiBOb3RlIHRoYXQgdXNlIG9mIDo6
bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGggbm9uLWJsb2NraW5nIHJ1bm5pbmcgb24gZ3Jv
dXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91cF9ub25ibG9jayBkb2N1bWVudGF0aW9uIGZv
ciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2Uu
CiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKiBccmV0
dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBO
VUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKk1pbkhlYXBfcnVuX2dyb3VwX25v
bmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgTWluSGVhcF9hY3Rpb25zX3QgKmludGVyZmFjZV9h
Y3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShn
cm91cCk7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gTWluSGVhcF9jb252ZXJ0X2ludGVybmFs
KG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCBOVUxMLCBOVUxMKTsKCWlmKGFjdGlvbnMg
PT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVy
biBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVu
X2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rpb25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9u
cyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3Rh
dGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBb
aW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixv
dXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICog
UnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxl
bmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2Fy
cmF5LgogKi8Kdm9pZCBNaW5IZWFwX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXks
IE1pbkhlYXBfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3QgKnJ1
biA9IE1pbkhlYXBfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9u
cyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2Fp
dChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1i
bG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBT
Y2hlZHVsZSB0byBydW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2lu
ZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2Fj
dGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICogVGhlIHN0YXR1cyBvZiB0
aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVpdGhlciBieSA6Om1heF93YWl0IG9yIDo6bWF4X25vd2Fp
dDsKICogbm90ZSB0aGF0IG9uZSBvZiB0aGVzZSAqbXVzdCogYmUgY2FsbGVkLCBzbyB0aGF0IGFz
c29jaWF0ZWQgbWVtb3J5IGNhbiBiZSByZWxlYXNlZC4KICoKICogXHBhcmFtIFtpbl0gZW5nYXJy
YXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2Vf
YWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUg
b24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBv
ZiBlcnJvci4KICovCm1heF9ydW5fdCAqTWluSGVhcF9ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2Vu
Z2FycmF5X3QgKmVuZ2FycmF5LCBNaW5IZWFwX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNb
XSkKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdhcnJheV9nZXRfbWF4X2ZpbGUoZW5n
YXJyYXksIDApOwoJaW50IGk7CgltYXhfYWN0YXJyYXlfdCAqYWN0YXJyYXkgPSBtYXhfYWN0YXJy
YXlfaW5pdChtYXhmaWxlLCBlbmdhcnJheS0+c2l6ZSk7CglpZiAoYWN0YXJyYXkgPT0gTlVMTCkg
cmV0dXJuIE5VTEw7CgltYXhfYWN0aW9uc190ICoqYXJyX2FjdGlvbnMgPSBtYWxsb2MoZW5nYXJy
YXktPnNpemUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCopKTsKCWZvciAoIGkgPSAwIDsgaSA8IGFj
dGFycmF5LT5zaXplOyBpKysgKSB7CgkJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IE1pbkhlYXBf
Y29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tpXSwgMSwgTlVMTCwg
TlVMTCk7CgkJaWYgKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlvbnNb
aV0gPSBhY3Rpb25zOwoJCW1heF9zZXRfYWN0aW9uKGFjdGFycmF5LCBpLCBhY3Rpb25zKTsKCX0K
CW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgYWN0YXJy
YXkpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNpemUgOyBpKysgKSB7IG1heF9hY3Rp
b25zX2ZyZWUoYXJyX2FjdGlvbnNbaV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhY3RhcnJheSk7
CglmcmVlKGFycl9hY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZl
cnRzIGEgc3RhdGljLWludGVyZmFjZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVy
ZmFjZSBtYXhfYWN0aW9uc190IHN0cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50
ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3Rh
dGljIGludGVyZmFjZS4KICoKICogXHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1
c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lm
aWMgYWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlv
bnMgdG8gcnVuLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBN
aW5IZWFwX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgTWluSGVhcF9hY3Rpb25zX3QgKmlu
dGVyZmFjZV9hY3Rpb25zKQp7CglyZXR1cm4gTWluSGVhcF9jb252ZXJ0X2ludGVybmFsKG1heGZp
bGUsIGludGVyZmFjZV9hY3Rpb25zLCAwLCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNLX0VS
Uk9SU19TVAojdW5kZWYgQ0hFQ0tfTlVMTAoKCg==
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1919, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1920, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1942, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1943, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1951, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1952, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1960, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1961, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1969, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1970, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1978, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1979, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1987, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1988, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1996, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1997, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2005, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2006, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2014, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2015, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2024, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2947, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2946, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 6, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2688, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2025, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2026, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2689, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2690, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2027, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2032, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2059, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2691, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2871, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2872, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2945, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2944, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2694, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2693, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2061, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2696, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 120, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 253, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2697, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2698, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 254, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 264, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2080, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2081, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 265, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 268, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2699, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2701, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2702, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 269, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 270, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2703, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2099, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 271, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 274, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2875, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2705, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 275, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 276, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2706, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 277, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 306, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 309, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 310, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2873, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2874, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 311, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2717, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2943, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2942, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2710, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2864, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 314, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 317, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 318, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2713, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 300, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 303, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 304, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 305, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2876, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2877, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 319, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 438, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2715, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2716, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 439, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 449, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2151, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 450, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 453, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 320, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 323, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 324, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 325, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2720, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2721, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 454, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 455, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2722, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 456, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 459, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2881, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2878, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 460, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 461, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2725, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 462, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2172, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 491, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2199, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 494, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 495, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2879, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2880, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 496, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2736, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2941, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2940, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2729, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2865, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 499, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2201, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 502, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 503, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2732, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 485, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 488, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 489, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 490, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2882, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2883, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 504, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 623, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2734, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2735, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 624, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 634, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2220, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2221, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 635, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 638, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 505, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 508, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 509, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 510, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2739, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2740, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 639, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 640, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2741, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2239, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 641, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 644, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2887, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2884, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 645, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 646, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2744, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 647, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2242, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 676, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2269, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 679, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 680, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2885, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2886, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 681, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2755, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2939, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2938, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2748, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2866, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 684, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2271, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 687, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 688, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2751, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 670, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 673, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 674, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 675, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2888, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2889, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 689, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 808, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2753, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2754, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 809, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 819, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2290, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2291, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 820, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 823, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 690, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 693, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 694, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 695, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2758, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2759, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 824, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 825, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2760, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2309, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 826, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 829, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2893, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2890, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 830, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 831, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2763, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 832, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2312, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 861, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2339, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 864, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 865, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2891, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2892, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 866, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2774, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2937, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2936, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2767, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2867, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 869, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2341, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 872, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 873, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2770, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 855, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 858, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 859, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 860, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2894, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2895, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 874, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 993, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2772, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2773, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 994, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1004, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2360, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2361, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1005, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1008, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 875, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 878, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 879, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 880, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2777, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2778, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1009, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1010, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2779, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2379, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1011, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1014, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2899, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2896, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1015, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1016, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2782, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1017, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2382, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1046, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2409, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1049, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1050, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2897, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2898, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1051, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2793, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2935, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2934, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2786, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2868, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1054, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2411, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1057, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1058, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2789, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1040, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1043, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1044, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1045, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2900, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2901, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1059, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1178, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2791, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2792, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1179, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1189, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2430, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2431, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1190, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1193, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1060, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1063, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1064, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1065, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2796, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2797, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1194, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1195, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2798, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2449, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1196, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1199, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2905, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2902, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1200, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1201, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2801, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1202, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2452, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1231, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2479, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1234, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1235, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2903, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2904, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1236, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2812, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2933, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2932, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2805, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2869, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1239, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2481, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1242, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1243, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2808, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1225, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1228, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1229, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1230, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2906, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2907, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1244, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1363, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2810, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2811, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1364, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1374, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2500, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2501, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1375, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1378, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1245, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1248, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1249, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1250, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2815, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2816, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1379, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1380, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2817, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2519, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1381, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1384, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2911, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2908, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1385, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1386, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2820, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1387, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2522, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1416, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2549, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1419, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1420, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2909, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2910, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1421, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2831, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2931, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 57, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2930, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2824, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2870, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1424, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2551, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1427, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1428, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2827, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1410, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1413, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1414, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1415, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2912, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2913, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1429, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1548, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2829, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2830, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1549, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1559, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2570, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2571, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1560, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1563, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1430, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1433, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1434, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1435, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2834, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2835, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1564, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1565, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2836, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2589, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1566, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1569, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2917, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2914, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1570, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1571, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2839, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1572, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2592, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1601, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2619, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1604, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1605, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2915, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2916, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1606, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2851, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2929, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2928, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2843, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2848, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1609, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2621, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1612, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1613, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2846, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1595, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1598, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1599, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1600, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2918, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2919, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1614, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1733, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2849, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2922, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1734, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1744, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2640, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2641, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1745, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1748, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1615, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1618, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1619, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1620, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2854, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2855, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1749, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1750, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2856, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2659, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1751, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1754, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2924, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2920, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1755, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1756, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2859, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1757, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2662, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1794, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2675, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1797, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1798, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2862, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1780, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2677, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1783, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1784, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2923, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2921, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1785, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2925, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1799, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1922, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1927, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2927, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1924, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1925, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1926, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1928, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 2926, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1930, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1931, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1933, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1934, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(MinHeapKernel, 1932, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02140ad5b5cfe57fb22f07cffa772dd1bd0847141cb10214563551d605da08df25383382e7920e4cc0b0c2aa")
#endif

